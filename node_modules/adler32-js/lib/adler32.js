// Generated by CoffeeScript 1.7.1
(function() {
  var Adler32, BASE, MOD, MOD28, MOD63, NMAX, adler32, exports, fs, total;

  fs = require('fs');


  /*
  
    Copyright (C) 1995-2013 Jean-loup Gailly and Mark Adler
  
    This software is provided 'as-is', without any express or implied
    warranty.  In no event will the authors be held liable for any damages
    arising from the use of this software.
  
    Permission is granted to anyone to use this software for any purpose,
    including commercial applications, and to alter it and redistribute it
    freely, subject to the following restrictions:
  
    1. The origin of this software must not be misrepresented; you must not
       claim that you wrote the original software. If you use this software
       in a product, an acknowledgment in the product documentation would be
       appreciated but is not required.
    2. Altered source versions must be plainly marked as such, and must not be
       misrepresented as being the original software.
    3. This notice may not be removed or altered from any source distribution.
  
    Jean-loup Gailly        Mark Adler
    jloup@gzip.org          madler@alumni.caltech.edu
  
  
    The data format used by the zlib library is described by RFCs (Request for
    Comments) 1950 to 1952 in the files http://tools.ietf.org/html/rfc1950
    (zlib format), rfc1951 (deflate format) and rfc1952 (gzip format).
   */

  BASE = 65521;

  NMAX = 5552;

  MOD = function(a) {
    return a %= BASE;
  };

  MOD28 = function(a) {
    return a %= BASE;
  };

  MOD63 = function(a) {
    return a %= BASE;
  };

  adler32 = function(adler, buf) {
    var len, n, pos, sum2;
    len = buf.length;
    sum2 = (adler >>> 16) & 0xffff;
    adler &= 0xffff;
    if (len === 1) {
      adler += buf[0];
      if (adler >= BASE) {
        adler -= BASE;
      }
      sum2 += adler;
      if (sum2 >= BASE) {
        sum2 -= BASE;
      }
      return adler + (sum2 * 65536);
    }
    if (buf == null) {
      return 1;
    }
    pos = 0;
    if (len < 16) {
      while (len--) {
        adler += buf[pos];
        pos++;
        sum2 += adler;
      }
      if (adler >= BASE) {
        adler -= BASE;
      }
      sum2 = MOD28(sum2);
      return adler + (sum2 * 65536);
    }
    while (len >= NMAX) {
      len -= NMAX;
      n = NMAX / 16;
      while (n--) {
        adler += buf[pos];
        sum2 += adler;
        adler += buf[pos + 1];
        sum2 += adler;
        adler += buf[pos + 2];
        sum2 += adler;
        adler += buf[pos + 3];
        sum2 += adler;
        adler += buf[pos + 4];
        sum2 += adler;
        adler += buf[pos + 5];
        sum2 += adler;
        adler += buf[pos + 6];
        sum2 += adler;
        adler += buf[pos + 7];
        sum2 += adler;
        adler += buf[pos + 8];
        sum2 += adler;
        adler += buf[pos + 9];
        sum2 += adler;
        adler += buf[pos + 10];
        sum2 += adler;
        adler += buf[pos + 11];
        sum2 += adler;
        adler += buf[pos + 12];
        sum2 += adler;
        adler += buf[pos + 13];
        sum2 += adler;
        adler += buf[pos + 14];
        sum2 += adler;
        adler += buf[pos + 15];
        sum2 += adler;
        pos += 16;
      }
      adler = MOD(adler);
      sum2 = MOD(sum2);
    }
    if (len) {
      while (len >= 16) {
        len -= 16;
        adler += buf[pos];
        sum2 += adler;
        adler += buf[pos + 1];
        sum2 += adler;
        adler += buf[pos + 2];
        sum2 += adler;
        adler += buf[pos + 3];
        sum2 += adler;
        adler += buf[pos + 4];
        sum2 += adler;
        adler += buf[pos + 5];
        sum2 += adler;
        adler += buf[pos + 6];
        sum2 += adler;
        adler += buf[pos + 7];
        sum2 += adler;
        adler += buf[pos + 8];
        sum2 += adler;
        adler += buf[pos + 9];
        sum2 += adler;
        adler += buf[pos + 10];
        sum2 += adler;
        adler += buf[pos + 11];
        sum2 += adler;
        adler += buf[pos + 12];
        sum2 += adler;
        adler += buf[pos + 13];
        sum2 += adler;
        adler += buf[pos + 14];
        sum2 += adler;
        adler += buf[pos + 15];
        sum2 += adler;
        pos += 16;
      }
      while (len--) {
        adler += buf[pos];
        pos++;
        sum2 += adler;
      }
      adler = MOD(adler);
      sum2 = MOD(sum2);
    }
    return adler + (sum2 * 65536);
  };

  total = 0;

  Adler32 = (function() {
    function Adler32() {
      this.adler = 1;
    }

    Adler32.prototype.update = function(data, encoding) {
      if (encoding == null) {
        encoding = null;
      }
      if (!(data instanceof Buffer)) {
        data = new Buffer(data, encoding);
      }
      return this.adler = adler32(this.adler, data);
    };

    Adler32.prototype.digest = function(encoding) {
      var answer, i, val;
      if (encoding == null) {
        encoding = 'binary';
      }
      answer = new Buffer(4);
      val = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i < 4; i = ++_i) {
          _results.push(answer[3 - i] = (this.adler >>> (i * 8)) & 0xff);
        }
        return _results;
      }).call(this);
      return answer.toString(encoding);
    };

    Adler32.prototype.result = function() {
      return this.adler;
    };

    Adler32.prototype.reset = function() {
      return this.adler = 1;
    };

    Adler32.fromStream = function(stream, options, done) {
      var adler;
      if (done == null) {
        done = options;
        options = {};
      }
      adler = new Adler32();
      stream.on('data', function(d) {
        return adler.update(d);
      });
      stream.on('error', function(err) {
        return done(err);
      });
      stream.on('end', function() {
        if (options.encoding == null) {
          return done(null, adler.result());
        } else {
          return done(null, adler.digest(options.encoding));
        }
      });
      return null;
    };

    Adler32.fromFile = function(path, options, done) {
      var readStream;
      if (done == null) {
        done = options;
        options = {};
      }
      readStream = fs.createReadStream(path);
      Adler32.fromStream(readStream, options, function(err, result) {
        return done(err, result);
      });
      return null;
    };

    Adler32.fromFileSync = function(path, options) {
      var data;
      if (options == null) {
        options = {};
      }
      data = fs.readFileSync(path);
      return Adler32.fromString(data, options);
    };

    Adler32.fromString = function(string, options) {
      var adler;
      if (options == null) {
        options = {};
      }
      adler = new Adler32();
      adler.update(string);
      if (options.encoding == null) {
        return adler.result();
      } else {
        return adler.digest(options.encoding);
      }
    };

    return Adler32;

  })();

  exports = module.exports = Adler32;

}).call(this);
